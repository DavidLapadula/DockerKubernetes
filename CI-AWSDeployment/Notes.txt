Travis
 	- Listen for changes pushed to master, githb alerts Travis
	- Travis pulls code in repository and 'does work' - like testing and deployment
	- Just give Travis access to repository
	- travis.yml file to tell Travis what to do
		- Have Docker running and ready to build image > Build image with DockerFile > Run tests > Deploy to AWS
 			- Travis runs commands and anything other than 0 return code is a fail
		- before_install: setup before tests are run (use to build image, tag with name so can refer to it)
		- script: commands needed to run test suite
- Elastic Beanstalk
	- Run 1 container
	- EB creates load balancer that manages requests and routes to a VM running docker where the container is stored
	- EB will monitor traffic and auto-scale, add VM's to route new requests to least used server
	- Automatically makes S3 bucket
		- One bucket used for all EB environments made
- deploy section on .travis.yml
	- provider: eb, b/c travis setup with eb to deploy
	- region, based on where EB instance made
	- app: name of app
	- env: name of application
		- Actual app running inside is referred to as environment
	- bucket_name: Travis will copy and zip files and then copy to S3 bucket, or HD on AWS to deploy
		- Need to provide name of bucket Travis deploys to 
	- bucket_path: equal to app name
	- on: branch: master: for deployment
	- access_key_id, secret_access_key: secret key made from new 'User' on AWS IAM service
		- Programmatic access will only allows keeys to be valid through network requests
		- Attach existing policies grants permission to user that is being created (allow all)
		- Access key ID, Secret Access key as environment secrets wit Trav CI or environment variables
- Port mapping through deployment
	- EXPOSE instruction in Dockerfile, EB will look for this instruction for a port to map directly
- PR will allow travis to pull down changes, when go to merge will show that tests have passed
- Docker is just tool in development process. Allow SETTING UP easier, and do not have to redo deployment pipeline for another project

- Travis can build prod image, push to Dockerhub, EB pulls from DockerHub to deploy. Prevents EB from building images instead of just deploying
	- Production docker file will not run any tests and only copies over files that are required
- nginx used to handle own appliocation routing and to serve prod react files from specified port
	- One container for routing, another one for serving up assets
- npm run build will create folder called 'build' with production assets
- In React app behind main nginx router, another nginx router listening on other port to serve react files
	- Need to expose THAT port in default.conf for nginx and copy over build files when images being made
- Travis deployment
	- First build test images (development docker file) to run tests
	- before_install specifies which dockerfile to use and relative build context
	- after_success for building production level images (uses default dockerfile and build context) to pushed to docker hub
- Tell EB what to do with multiple containers. Need file to do so, and specify which image to use. EB will pull image and tell it to run
	- Dockerrun json file. Elastic Container Service (ECS) uses task definitions to run container
	- Dockerrun uses rules of task definitions for ECS
	- Image defined in docker run file, and docker compose sets hostname when setting service name for image
		- Hostname will is what routing will look for when traffic is incoming
	- Port mapping to set host from one running on container to the one running on container
- Make links between containers, need to made distinct between running containers
- In production, use other AWS services for data providers instead of own containers
	- Elastic Cache instead of redis, AWS RDS instead of Postgre instance: 
		- will make pro instance of redis, auto scale, built in maintenance, better security, auto rollbacks
- Need to form connection between EB and external services
- Virtual Private Cloud	created for each region, little network for only your account to manage services	 
- Security group (Firewall Rule): which services can access your VPC. Make all instances belong to one group, then can access other services
- Making Custom Security Group
	- Allows services to talk to eachother, rules allow traffic by assigning service to that security group
	- Then apply security group to instances as needed, modify service to belong to security group that you created
	- Host for services EB reaches to is the endpoint of the service made for it
	- All containers on EB instance has access to ENV variables set in AWS
	- Travis will build production images THEN to docker hub, THEN Travis pushes project to EB, EB pulls images from docker hub
- Memory option needed for containers, need to tell it in Dockerrun json
